/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  ListItem,
} from './components/list/list';

export namespace Components {
  interface RestencilCounter {
    /**
    * The count of the counter
    */
    'count': number;
    'max': number;
    'min': number;
    'reset': () => Promise<void>;
  }
  interface RestencilList {
    /**
    * The count of the list
    */
    'items': ListItem[];
  }
}

declare global {


  interface HTMLRestencilCounterElement extends Components.RestencilCounter, HTMLStencilElement {}
  var HTMLRestencilCounterElement: {
    prototype: HTMLRestencilCounterElement;
    new (): HTMLRestencilCounterElement;
  };

  interface HTMLRestencilListElement extends Components.RestencilList, HTMLStencilElement {}
  var HTMLRestencilListElement: {
    prototype: HTMLRestencilListElement;
    new (): HTMLRestencilListElement;
  };
  interface HTMLElementTagNameMap {
    'restencil-counter': HTMLRestencilCounterElement;
    'restencil-list': HTMLRestencilListElement;
  }
}

declare namespace LocalJSX {
  interface RestencilCounter extends JSXBase.HTMLAttributes<HTMLRestencilCounterElement> {
    /**
    * The count of the counter
    */
    'count'?: number;
    'max'?: number;
    'min'?: number;
    'onCounterChange'?: (event: CustomEvent<any>) => void;
  }
  interface RestencilList extends JSXBase.HTMLAttributes<HTMLRestencilListElement> {
    /**
    * The count of the list
    */
    'items'?: ListItem[];
  }

  interface IntrinsicElements {
    'restencil-counter': RestencilCounter;
    'restencil-list': RestencilList;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


